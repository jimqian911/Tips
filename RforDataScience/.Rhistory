nycflights13::flights %>%
group_by(month, dest) %>%
dplyr::summarise(dep_delay = mean(dep_delay, na.rm = T)) %>%
group_by(dest)# %>%
#filter(n() == 12)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = .01)
install.packages("hexbin")
smaller
ggplot(data = diamonds) +
geom_freqpoly(aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, color = carat))
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, color = cut_width(carat, .3)))
# not good
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, color = cut_width(carat, .3)))
# better
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, y = ..density.., color = cut_width(carat, .3)))
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, y = ..density..,  color = cut_number(carat, 10)))
ggplot(data = diamonds) +
geom_boxplot(aes(x = carat, y = cut_number(price, 10)))
ggplot(data = diamonds) +
geom_boxplot(aes(y = carat, x = cut_number(price, 10)))
# weird
ggplot(data = diamonds) +
geom_boxplot(aes(x = carat, y = cut_number(price, 10)))
# good
ggplot(data = diamonds) +
geom_boxplot(aes(y = carat, x = cut_number(price, 10)))
# weird
ggplot(data = diamonds) +
geom_boxplot(aes(x = carat, y = cut_number(price, 10)))
# good
ggplot(data = diamonds) +
geom_boxplot(aes(y = carat, x = cut_number(price, 10))) +
coord_flip()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex() +
facet_wrap(~ cut, ncol = 1)
library(modelr)
library(modelr)
mode <- lm(log(price) ~ log(carat), diamonds)
diamonds <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
library(modelr)
mod <- lm(log(price) ~ log(carat), diamonds)
diamonds <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(diamonds2) +
geom_point(aes(x = carat, y = resid))
library(modelr)
mod <- lm(log(price) ~ log(carat), diamonds)
diamonds <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
diamonds2
library(modelr)
mod <- lm(log(price) ~ log(carat), diamonds)
diamonds3 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(diamonds3) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(diamonds3) +
geom_boxplot(aes(x = cut, y = resid))
ggplot(diamonds3) +
geom_point(aes(x = cut, y = price))
ggplot(diamonds3) +
geom_point(aes(x = carat, y = cut))
ggplot(diamonds3) +
geom_boxplot(aes(x = carat, y = cut))
ggplot(diamonds3) +
geom_boxplot(aes(x = cut, y = carat))
library(ggplot2)
library(tidyverse)
diamonds %>% count(cut) # count
ggplot(diamonds) + geom_bar(aes(x = cut))
diamonds %>%
count(cut_width(carat, .5))
ggplot(diamonds) + geom_histogram(aes(x = carat), binwidth = .5)
diamonds %>%
filter(carat < 3) %>%
ggplot() +
geom_histogram(aes(x = carat), binwidth = .01)
ggplot(diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50)) # zoom in y 0:50
diamonds %>%
filter(y < 3 | y > 20) %>%
dplyr::select(price, x, y, z) %>%
arrange(y)
ggplot(diamonds, aes(x = x)) +
geom_histogram(binwidth = .05)
# price around 1500 does not exist
diamonds %>%
filter(carat == .99)
diamonds %>%
filter(carat == 1)
diamonds %>%
mutate(id = row_number()) %>%
dplyr::select(x, y, z, id) %>%
gather(variable, value, -id) # melt with `x,y,z` without `id` while remaining it as `id`
# the first argument(`variable`) take the colnames and the second argument (`value`) takes the values of the argument for each row
diamonds %>%
mutate(id = row_number()) %>%
dplyr::select(x, y, z, id) %>%
gather(variable, value, -id) %>%
ggplot(aes(x = value)) + geom_density() + facet_grid(variable ~ .) + geom_rug()
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price)) +
coord_cartesian(xlim = c(100, 5000), ylim = c(0, 3000))
ggplot(diamonds) +
geom_histogram(mapping = aes(x = price)) +
xlim(100, 5000) + ylim(0, 3000)
# return `NA` if the value matches the logical vector in the first argument
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point() # or alternatively geom_point(na.rm = T)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %/% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(color = cancelled), binwidth = 1/4)
# price毎にdensity plotを作成する
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
# cut毎に、priceの位置をboxplotした
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time)
) %>%
ggplot(mapping = aes(x = cancelled, y = sched_dep_time)) + geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) +
coord_flip()
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
# the two codes below provide same results
diamonds %>%
count(color, cut)
diamonds %>%
group_by(color, cut) %>%
dplyr::summarise(n = n())
nycflights13::flights %>%
group_by(month, dest) %>%
dplyr::summarise(dep_delay = mean(dep_delay, na.rm = T)) %>%
group_by(dest) %>% # この前でungroup()してもいい
filter(n() == 12) # 12のフライトがあるdestのみを抽出 = 毎月フライトがあるdestを抽出。上記でgroup_by
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price), alpha = .01)
# one option
# cut_width determine the cut points for changing color
# in this example by 0.3 each, [0.45, 0.75], [0.75, 1.05]
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, color = cut_width(carat, .3)))
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, y = ..density.., color = cut_width(carat, .3)))
# another option
# cut_number determine the cut points based on the number of observation in each cluster
# in this case, each cluster of the size (carat) has 10 observations
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, color = cut_number(carat, 10)))
ggplot(data = diamonds) +
geom_freqpoly(aes(x = price, y = ..density..,  color = cut_number(carat, 10)))
# `x` of boxplot control the number to be plot
# `y` of boxplot control the partion
# weird
ggplot(data = diamonds) +
geom_boxplot(aes(x = carat, y = cut_number(price, 10)))
# good
ggplot(data = diamonds) +
geom_boxplot(aes(y = carat, x = cut_number(price, 10))) +
coord_flip()
# hexagonal heatmap
ggplot(diamonds, aes(x = carat, y = price)) +
geom_hex() +
facet_wrap(~ cut, ncol = 1)
library(modelr)
mod <- lm(log(price) ~ log(carat), diamonds)
diamonds3 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(diamonds3) +
geom_point(mapping = aes(x = carat, y = resid))
ggplot(diamonds3) +
geom_boxplot(aes(x = cut, y = resid))
ggplot(diamonds3) +
geom_boxplot(aes(x = cut, y = carat))
ggplot(diamonds3) +
geom_boxplot(aes(x = cut, y = price))
# create tibble
tibble{
# create tibble
tibble{
# create tibble
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
library(tidyverse)
# create tibble
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
```{r}
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
df <- data.frame(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(df)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
df <- data.frame(
":)" = "smile",
" " = "space",
"2000" = "number"
)
print(df)
tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
tribble(
x, y, z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
library(tidyverse)
# create tibble
tibble(
x = 1:5,
y = 1,
z = x^2 + y
)
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
print(tb)
df <- data.frame(
":)" = "smile",
" " = "space",
"2000" = "number"
)
# see the difference between tb and df
print(df)
tribble(
~x, ~y, ~z, # you need `~`
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df[["x"]]
df["x"]
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df[["x"]]
df[:x]
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df[["x"]]
df["x"]
df <- tibble(
x = runif(5),
y = rnorm(5)
)
df$x
df[["x"]]
df["x"]
dplyr::select(df, z)
dplyr::select(df, x)
dplyr::select(df, x<1)
dplyr::select(df, x, y)
dplyr::filter(df, x <1)
dplyr::filter(df, x <1&y<1 )
df2 <- tibble(
x <- c("a", "b", "c")
y <- c(1,2,3)
df2 <- tibble(
x <- c("a", "b", "c"),
y <- c(1,2,3)
)
df2 <- tibble(
x <- c("a", "b", "c"),
y <- c(1,2,3)
)
df2[["a"]]
df2 <- tibble(
x <- c("a", "b", "c"),
y <- c(1,2,3)
)
df2[[a]]
a <- 5
df2 <- tibble(
x <- c("a", "b", "c"),
y <- c(1,2,3)
)
df2[[a]]
a <- 5
df2 <- tibble(
x <- c("a", "b", "c"),
y <- c(1,2,3)
)
df2[["a"]]
df2
df <- data.frame(abc = 1, xyz = "a")
tbl <- as_tibble(df)
tbl[[var]]
df <- data.frame(abc = 1, xyz = "a")
tbl <- as_tibble(df)
df[[var]]
?readr
# 2
union(names(formals(read_csv)), names(formals(read_tsv)))
x <- "x,y\n1,'a,b'"
read_delim(x, ",", quote = "'")
x <- "x,y\n1,'a,b'"
read_delim(x, ",", quote = "'")
read_csv(x)
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv2("a;b\n1;3")
x  <- parse_integer(c("1", "abc", "123.45"))
# if you get warn, the failues would be missing in the output
x
x  <- parse_integer(c("1", "abc", "123.45", ".") na = ".")
x  <- parse_integer(c("1", "abc", "123.45", "."), na = ".")
# if you get warn, the failues would be missing in the output
x
x  <- parse_integer(c("1", "abc", "123.45", "."), na = ".")
# if you get warn, the failues would be missing in the output
x
# see problems
problems(x)
parse_number("It cost $123.45")
charToRaw("Hadley")
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
x1 <- "El Ni\xf1o was particularly bad this year" # Latin1 style
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd" # shift-jis style
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
# you can "guess" the encoding
guess_encoding(charToRaw(x1))
parse_datetime("2010-10-01T2010")
parse_datetime("2010-10-01T2010")
parse_datetime("20101010")
parse_datetime("2010-10-01T2010")
parse_datetime("20101010")
parse_date("2010-10-01")
parse_datetime("2010-10-01T2010")
parse_datetime("20101010")
parse_date("2010-10-01")
parse_date("2010/10/01")
parse_date("2010-10-01")
parse_date("2010/10/01")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_time("01/15/30", "%H/%M/%0s")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_time("01/15/30", "%H/%M/%OS")
# 2
x <- "it is easy"
decimal_mark(x)
locale()
# 2
locale(decimal_mark = ".", grouping_mark = ".")
